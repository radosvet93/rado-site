---
import { AppConfig } from '@/utils/AppConfig';
import Base from '@/layouts/Base.astro';
import PostHeader from '@/components/PostHeader.astro';
import PostContent from '@/components/PostContent.astro';
import Newsletter from '@/components/Newsletter.astro';
import RelatedPosts from '@/components/RelatedPosts.astro';
import type { PostFrontmatter } from '@/types';
import type { MarkdownInstance } from 'astro';
import { validatePost } from '@/content/validate';
import { sortPostsByDate } from '@/utils/data.util';
import Section from '@/components/Section.astro';

type Props = {
	frontmatter: PostFrontmatter;
};

const { frontmatter } = Astro.props;

const rawPosts = import.meta.glob<MarkdownInstance<PostFrontmatter>>(
	'/src/pages/posts/**/*.{md,mdx}',
	{ eager: true }
);

const allPosts = Object.entries(rawPosts).map(([id, mod]) => ({
	...mod,
	frontmatter: validatePost(mod.frontmatter, id)
})) as MarkdownInstance<PostFrontmatter>[];

allPosts.sort(sortPostsByDate);

const relatedPosts = (frontmatter.relatedPosts ?? [])
	.map((slug) => allPosts.find((post) => post?.url?.includes(slug)))
	.map((post) => ({
		url: post?.url!,
		frontmatter: post?.frontmatter!
	}));
---

<Base
	head={{
		title: `${frontmatter.title} | ${AppConfig.title}`,
		description: frontmatter.description
	}}
>
	<div class="mx-auto w-full max-w-screen-md">
		<PostHeader {...frontmatter} />

		<PostContent>
			<slot />
		</PostContent>
	</div>

	<Section>
		{relatedPosts.length > 0 && <RelatedPosts posts={relatedPosts} />}
	</Section>

	<Newsletter />
</Base>
