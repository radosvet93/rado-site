---
import Section from '@/components/Section.astro';
import Base from '@/layouts/Base.astro';
import Heading from '@/components/Heading.astro';
import { AppConfig } from '@/utils/AppConfig';
import { MarkdownInstance } from 'astro';
import { sortPostsByDate } from '@/utils/data.util';
import Cards from '@/components/Cards.astro';

export async function getStaticPaths(): Promise<any> {
	const allPosts = Object.values(
		import.meta.glob('../posts/**/*.md', { eager: true })
	) as MarkdownInstance<any>[];

	const allTags: Set<string> = new Set(
		allPosts.map((post: MarkdownInstance<Record<string, any>>) => post.frontmatter.tags).flat()
	);

	return [...allTags].map((tag) => {
		const filteredPosts = allPosts.filter(
			(post: MarkdownInstance<Record<string, any>>) =>
				post.frontmatter.tags.includes(tag) && post.frontmatter.isPublished != false
		);

		// Sort posts by pinned status and date
		filteredPosts.sort(sortPostsByDate);

		return {
			params: { tag: tag },
			props: {
				posts: filteredPosts
			}
		};
	});
}

interface Props {
	posts: {
		url: string;
		frontmatter: {
			title: string;
			isPinned?: boolean;
			pubDate: string;
			minutesRead: string;
			excerpt: string;
			isPublished?: boolean;
			image: {
				src: string;
				alt: string;
			};
			tags?: string[];
		};
	}[];
}

const { tag } = Astro.params;
const title = AppConfig.title;
const description = AppConfig.description;

const { posts } = Astro.props;

const publishedPosts = posts.filter(
	(post: Props['posts'][0]) =>
		post.frontmatter.tags?.includes(tag) && post.frontmatter.isPublished != false
);
---

<Base head={{ title: `Tag: ${tag} | ${title}`, description }}>
	<Section>
		<Heading title={`Posts with #${tag}`} />
		<div class="pt-2 text-center">
			<a href="/tags" class="underline hover:text-orange-600">all tags â†’</a>
		</div>
	</Section>
	<Section>
		<Cards posts={publishedPosts} />
	</Section>
</Base>
